import java.io.*;
import java.util.*;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import jxl.write.biff.RowsExceededException;

public class Tester {
	
	public static int salarySum, column, row;
	public static double valueSum, consSum, scoreSum;
	public static boolean maxOneTeam;
	public static ArrayList<Player> roster;
	public static WritableSheet shh;


	public static void main(String[] args) throws IOException, BiffException,
			RowsExceededException, WriteException {
		Workbook wb = Workbook.getWorkbook(new File("roster.xls"));
		
		// Input Area Starts
		WritableWorkbook lineup = Workbook.createWorkbook(new File ("5-1&2.xls"));
		shh = lineup.createSheet("sheet1", 0);

		Sheet sh = wb.getSheet("5-1&2");
		int max = 456;
		double min = -7.2;
		//Input Area Ends
		
		ArrayList<Player> pg = new ArrayList<>();
		ArrayList<Player> sg = new ArrayList<>();
		ArrayList<Player> sf = new ArrayList<>();
		ArrayList<Player> pf = new ArrayList<>();
		ArrayList<Player> c = new ArrayList<>();

		for (int r = 1; r < sh.getRows(); r++) {
			String name = sh.getCell(0, r).getContents();
			String position = sh.getCell(1, r).getContents();
			int salary = Integer.parseInt(sh.getCell(2, r).getContents());
			String team = sh.getCell(3, r).getContents();
			double value = Double.parseDouble(sh.getCell(4, r).getContents());
			double cons = Double.parseDouble(sh.getCell(5, r).getContents());
			double score = Double.parseDouble(sh.getCell(6, r).getContents());

			Player player = new Player(name, position, salary, team, value,cons,score);
			if (player.position.equals("PG"))
				pg.add(player);
			if (player.position.equals("SG"))
				sg.add(player);
			if (player.position.equals("SF"))
				sf.add(player);
			if (player.position.equals("PF"))
				pf.add(player);
			if (player.position.equals("C"))
				c.add(player);
		}
		// System.out.println(pg);

		
		shh.addCell(new Label(0,0,"PG"));
		shh.addCell(new Label(1,0,"PG"));
		shh.addCell(new Label(2,0,"SG"));
		shh.addCell(new Label(3,0,"SG"));
		shh.addCell(new Label(4,0,"SF"));
		shh.addCell(new Label(5,0,"SF"));
		shh.addCell(new Label(6,0,"PF"));
		shh.addCell(new Label(7,0,"PF"));
		shh.addCell(new Label(8,0,"C"));
		shh.addCell(new Label(9,0,"Salary"));
		shh.addCell(new Label(10,0,"Projected Value"));
		shh.addCell(new Label(11,0,"Consistency"));
		shh.addCell(new Label(12,0,"Score"));

		column = 0;
		row = 1;

		for (int pg1 = 0; pg1 < pg.size() - 1; pg1++)
			for (int pg2 = pg1 + 1; pg2 < pg.size(); pg2++)
				for (int sg1 = 0; sg1 < sg.size() - 1; sg1++)
					for (int sg2 = sg1 + 1; sg2 < sg.size(); sg2++)
						for (int sf1 = 0; sf1 < sf.size() - 1; sf1++)
							for (int sf2 = sf1 + 1; sf2 < sf.size(); sf2++)
								for (int pf1 = 0; pf1 < pf.size() - 1; pf1++)
									for (int pf2 = pf1 + 1; pf2 < pf.size(); pf2++)
										for (int c1 = 0; c1 < c.size(); c1++) {
											roster = new ArrayList<>();
											roster.add(pg.get(pg1));
											roster.add(pg.get(pg2));
											roster.add(sg.get(sg1));
											roster.add(sg.get(sg2));
											roster.add(sf.get(sf1));
											roster.add(sf.get(sf2));
											roster.add(pf.get(pf1));
											roster.add(pf.get(pf2));
											roster.add(c.get(c1));

											int salarySum = 0;
											valueSum = 0;
											consSum = 0;
											scoreSum = 0;
											TreeMap teamNum = new TreeMap();
											for (Player ele : roster) {
												salarySum += ele.salary;
												valueSum += ele.value;
												consSum += ele.cons;
												scoreSum += ele.score;
												
												if (!teamNum.containsKey(ele.team))
													teamNum.put(ele.team, 1);
												else
													teamNum.put(ele.team,(int)teamNum.get(ele.team) + 1);
											}
											
											maxOneTeam = true;
											for (Object ele:teamNum.values()){
												if ((int)ele > 4)
													maxOneTeam = false;
											}
											//findMaxMin();
											generateLineups(max, min);
											
										}
		lineup.write();
		lineup.close();
		wb.close();

	}
	
	public static void findMaxMin() throws RowsExceededException, WriteException {
		if ((salarySum <= 60000 && salarySum >= 59000 && consSum<= -4 && maxOneTeam == true ) ||
					(salarySum <= 60000 && salarySum >= 59000 && valueSum>=400 && maxOneTeam == true )){
			for (Player ele : roster) {
				Label label = new Label(column, row,ele.name);
				shh.addCell(label);
				column++;
			}
			shh.addCell(new Label(column,row, Integer.toString(salarySum)));
			shh.addCell(new Label(++column,row, Double.toString(valueSum)));
			shh.addCell(new Label(++column,row, Double.toString(consSum)));
			shh.addCell(new Label(++column,row, Double.toString(scoreSum)));

			column = 0;
			row++;
		}
	}
	
	public static void generateLineups(int max, double min) throws RowsExceededException, WriteException {
		//max of valueSum and min of consSum
		System.out.println("true");
		if (salarySum <= 60000 && salarySum >= 59000 && maxOneTeam == true){
			System.out.println("true");

			if (valueSum <= (max - 11) && valueSum >= (max - 14)
					|| valueSum <= (max - 22) && valueSum >= (max - 26)
					|| valueSum <= (max - 34) && valueSum >= (max - 38)
					|| valueSum <= (max - 45) && valueSum >= (max - 49)
					|| valueSum <= (max - 55) && valueSum >= (max - 57)) {
			
				if (consSum >= (min + 1.3) && consSum <= (min + 1.6)
						|| consSum >= (min + 2.7) && consSum <= (min + 3.2)
						|| consSum >= (min + 4.2) && consSum <= (min + 4.7)
						|| consSum >= (min + 5.1) && consSum <= (min + 5.5)
						|| consSum >= (min + 6.4) && consSum <= (min + 6.8)
						|| consSum >= (min + 7.5) && consSum <= (min + 7.9)) {	
				
			for (Player ele : roster) {
				Label label = new Label(column, row,ele.name);
				shh.addCell(label);
				column++;
			}
			shh.addCell(new Label(column,row, Integer.toString(salarySum)));
			shh.addCell(new Label(++column,row, Double.toString(valueSum)));
			shh.addCell(new Label(++column,row, Double.toString(consSum)));
			shh.addCell(new Label(++column,row, Double.toString(scoreSum)));

			column = 0;
			row++;
			
		}}}
	}
	
	
}
